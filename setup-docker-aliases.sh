#!/bin/bash

# Laravel Docker Development Environment Setup
# This script adds convenient aliases and functions to your shell

# Define colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

PROJECT_DIR="/Users/ahmadalsodani/Herd/dockerized-laravel-swoole"
DEVCONTAINER_DIR="$PROJECT_DIR/.devcontainer"

echo -e "${BLUE}Laravel Docker Development Setup${NC}"
echo "=================================="
echo

# Detect shell configuration file
if [[ "$SHELL" == *"zsh"* ]]; then
    SHELL_CONFIG="$HOME/.zshrc"
elif [[ "$SHELL" == *"bash"* ]]; then
    SHELL_CONFIG="$HOME/.bashrc"
else
    echo -e "${YELLOW}Warning: Unknown shell. Please manually add aliases to your shell configuration.${NC}"
    SHELL_CONFIG=""
fi

# Function definitions
FUNCTIONS='
# Laravel Docker Development Aliases
# Generated by Laravel Docker Setup

dartisan() {
    local project_dir="'$DEVCONTAINER_DIR'"
    if [ ! -d "$project_dir" ]; then
        echo "Error: Project directory not found: $project_dir"
        return 1
    fi
    (cd "$project_dir" && docker-compose exec app php artisan "$@")
}

la() {
    dartisan "$@"
}

dcompose() {
    local project_dir="'$DEVCONTAINER_DIR'"
    if [ ! -d "$project_dir" ]; then
        echo "Error: Project directory not found: $project_dir"
        return 1
    fi
    (cd "$project_dir" && docker-compose "$@")
}

dlogs() {
    local project_dir="'$DEVCONTAINER_DIR'"
    local service="${1:-app}"
    (cd "$project_dir" && docker-compose logs -f "$service")
}

dsh() {
    local project_dir="'$DEVCONTAINER_DIR'"
    local service="${1:-app}"
    (cd "$project_dir" && docker-compose exec "$service" sh)
}

# Laravel Docker aliases - End
'

# Add functions to current session
eval "$FUNCTIONS"

echo -e "${GREEN}✓${NC} Functions loaded in current session"
echo
echo "Available commands:"
echo "  ${BLUE}dartisan${NC} [command]  - Run Laravel artisan commands"
echo "  ${BLUE}la${NC} [command]       - Short alias for dartisan"
echo "  ${BLUE}dcompose${NC} [command]  - Run docker-compose commands"
echo "  ${BLUE}dlogs${NC} [service]     - Follow logs for a service (default: app)"
echo "  ${BLUE}dsh${NC} [service]       - Open shell in a service (default: app)"
echo
echo "Examples:"
echo "  dartisan migrate"
echo "  la make:controller UserController"
echo "  dcompose restart app"
echo "  dlogs nginx"
echo "  dsh app"
echo

# Ask if user wants to add to shell configuration
if [ -n "$SHELL_CONFIG" ]; then
    echo -e "${YELLOW}Would you like to add these functions to $SHELL_CONFIG? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        # Check if already added
        if grep -q "Laravel Docker Development Aliases" "$SHELL_CONFIG" 2>/dev/null; then
            echo -e "${YELLOW}⚠${NC} Functions already exist in $SHELL_CONFIG"
            echo -e "${YELLOW}Would you like to replace them? (y/N)${NC}"
            read -r replace_response
            if [[ "$replace_response" =~ ^[Yy]$ ]]; then
                # Remove old functions
                sed -i.bak '/# Laravel Docker Development Aliases/,/# Laravel Docker aliases - End/d' "$SHELL_CONFIG"
                echo "$FUNCTIONS" >> "$SHELL_CONFIG"
                echo -e "${GREEN}✓${NC} Functions updated in $SHELL_CONFIG"
            fi
        else
            echo "$FUNCTIONS" >> "$SHELL_CONFIG"
            echo -e "${GREEN}✓${NC} Functions added to $SHELL_CONFIG"
        fi
        echo -e "${BLUE}Please run:${NC} source $SHELL_CONFIG ${BLUE}or restart your terminal${NC}"
    fi
fi

echo
echo -e "${GREEN}Setup complete!${NC} You can now use the Laravel Docker commands."
